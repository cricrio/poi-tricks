generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id        String            @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  name      String            @default("")
  bio       String            @default("")
  picture   String            @default("")
  platforms CreatorPlatform[]
  videos    Video[]
  tricks    Trick[]
}

enum Platform {
  youtube
}

model CreatorPlatform {
  id         BigInt   @id @default(autoincrement())
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  platform   Platform?
  url        String?  @unique
  externalId String?  @unique
  creatorId  String?  @db.Uuid
  creator    Creator? @relation(fields: [creatorId], references: [id])
}

model Trick {
  id            String          @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  name          String
  preview       String?          @default("")
  difficulty    TrickDifficulty? @default(others)
  draft         Boolean         @default(true)
  tags          Tag[]
  videos        Video[]
  creator       User            @relation(fields: [creatorId], references: [id])
  creatorId        String          @db.Uuid
  creators      Creator[]
  prerequisites Trick[]         @relation("Prerequisite")
  next          Trick[]         @relation("Prerequisite")
  savedTricks   SavedTrick[]
}

model SavedTrick {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  trick     Trick    @relation(fields: [trickId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  category  String
  userId    String   @db.Uuid
  trickId   String   @db.Uuid
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  email         String         @unique
  picture       String?
  createdTricks Trick[]
  savedTricks   SavedTrick[]
  contributions Contribution[]
}

model Video {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  externalId String   @unique
  source     String   @default("others")
  trickId    String?  @db.Uuid
  title      String   @default("")
  creatorId  String?  @db.Uuid
  creator    Creator? @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trick      Trick?   @relation(fields: [trickId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum ContributionStatus {
  waiting
  rejected
  approved
  cancelled
}

enum ContributionAction {
  add
  remove
  update
  publish
  connect
  disconnect
}

model Contribution {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime           @default(now()) @db.Timestamptz(6)
  entity    String
  entityId  String
  key       String
  value     String
  action    ContributionAction
  author    User               @relation(fields: [authorId], references: [id])
  authorId    String             @db.Uuid
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  name      String
  tricks    Trick[]
}

enum TrickDifficulty {
  others
  beginner
  intermediate
  basics
  advanced
}
